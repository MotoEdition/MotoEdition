import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author student
 */
public class AllOrders extends javax.swing.JFrame {

	private static String dbURL = "jdbc:derby:MotoEdition1;create=true";
	// jdbc Connection
	private static Connection conn = null;
	private static Statement stmt = null;
	String[] Orders = {};

    /**
     * Creates new form AllOreders
     */
    public AllOrders() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton("", true);
        jRadioButton3 = new javax.swing.JRadioButton("", false);
        jRadioButton4 = new javax.swing.JRadioButton("", false);
        jRadioButton5 = new javax.swing.JRadioButton("", false);
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();

        ButtonGroup group = new ButtonGroup();
		group.add(jRadioButton1);
		group.add(jRadioButton3);
		group.add(jRadioButton4);
		group.add(jRadioButton5);
		
		jPanel1.setBackground(Color.black);
		jLabel1.setForeground(Color.red);
		jList1.setBackground(Color.LIGHT_GRAY);
		jRadioButton1.setForeground(Color.red);
		jRadioButton3.setForeground(Color.red);
		jRadioButton4.setForeground(Color.red);
		jRadioButton5.setForeground(Color.red);
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All Orders");

        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jRadioButton1.setText("Everything");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jRadioButton1ActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jButton3.setText("Show");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jButton3ActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jRadioButton3.setText("Problems");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jRadioButton3ActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jRadioButton4.setText("E-Mails");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jRadioButton4ActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jRadioButton5.setText("Telephones");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					jRadioButton5ActionPerformed(evt);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
            }
        });

        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(326, 326, 326)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 892, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jRadioButton5)
                        .addGap(84, 84, 84)
                        .addComponent(jRadioButton4)
                        .addGap(78, 78, 78)
                        .addComponent(jRadioButton3)
                        .addGap(75, 75, 75)
                        .addComponent(jRadioButton1)
                        .addGap(125, 125, 125)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jButton3)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton2))
                .addGap(48, 48, 48))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	Home home = new Home();
		home.setVisible(true);
		dispose();
	}                                       

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    	dispose();
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)                                       
    	throws SQLException {
    	if(i==1){
    		createConnection();
    		System.out.println(conn);

    		System.out.println("Lol");
    		jList1.setModel(new DefaultListModel());

    		Statement sta = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
    				ResultSet.CONCUR_UPDATABLE);

    		final ResultSet res = sta.executeQuery("SELECT * FROM Orders3");
    		if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY) {
    			System.out.println("ResultSet non-updatable.");
    		} else {
    			System.out.println("ResultSet updatable.");
    		}

    		while (res.next()) {

    			jList1.setModel(new javax.swing.AbstractListModel() {
    				{
    					String[] s = new String[Orders.length + 1];
    					for (int i = 0; i < Orders.length; i++) {
    						s[i] = Orders[i];
    					}
    					s[Orders.length] = ("  " + res.getInt("ID") + ", "
    							+ res.getString("Name1") + "  "
    							+ res.getString("Name2") + " - "
    							+ res.getString("Email"));
    							
    					Orders = s;

    				}

    				public int getSize() {
    					return Orders.length;
    				}

    				public Object getElementAt(int i) {
    					return Orders[i];
    				}
    			});

    		}

    		res.close();

    		sta.close();
    	}
    	else if(i==2){
    		createConnection();
    		System.out.println(conn);

    		System.out.println("Lol");
    		jList1.setModel(new DefaultListModel());

    		Statement sta = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
    				ResultSet.CONCUR_UPDATABLE);

    		final ResultSet res = sta.executeQuery("SELECT * FROM Orders3");
    		if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY) {
    			System.out.println("ResultSet non-updatable.");
    		} else {
    			System.out.println("ResultSet updatable.");
    		}

    		while (res.next()) {

    			jList1.setModel(new javax.swing.AbstractListModel() {
    				{
    					String[] s = new String[Orders.length + 1];
    					for (int i = 0; i < Orders.length; i++) {
    						s[i] = Orders[i];
    					}
    					s[Orders.length] = ("  " + res.getInt("ID") + ", "
    							+ res.getString("Name1") + "  "
    							+ res.getString("Name2") + " - "
    							+ res.getString("Telephone"));
    							
    					Orders = s;

    				}

    				public int getSize() {
    					return Orders.length;
    				}

    				public Object getElementAt(int i) {
    					return Orders[i];
    				}
    			});

    		}

    		res.close();

    		sta.close();
    		
    	}
    	else if(i==3){
    		
    		createConnection();
    		System.out.println(conn);

    		System.out.println("Lol");
    		jList1.setModel(new DefaultListModel());

    		Statement sta = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
    				ResultSet.CONCUR_UPDATABLE);

    		final ResultSet res = sta.executeQuery("SELECT * FROM Orders3");
    		if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY) {
    			System.out.println("ResultSet non-updatable.");
    		} else {
    			System.out.println("ResultSet updatable.");
    		}

    		while (res.next()) {

    			jList1.setModel(new javax.swing.AbstractListModel() {
    				{
    					String[] s = new String[Orders.length + 1];
    					for (int i = 0; i < Orders.length; i++) {
    						s[i] = Orders[i];
    					}
    					s[Orders.length] = ("  " + res.getInt("ID") + ", "
    							+ res.getString("Brand") + "  "
    							+ res.getString("Model") + " - "
    							+ res.getString("Problem") + ", "
    							+ res.getString("Price"));
    							
    					Orders = s;

    				}

    				public int getSize() {
    					return Orders.length;
    				}

    				public Object getElementAt(int i) {
    					return Orders[i];
    				}
    			});

    		}

    		res.close();

    		sta.close();
    		
    	}
    	else  {
    		createConnection();
    		System.out.println(conn);

    		System.out.println("Lol");
    		jList1.setModel(new DefaultListModel());

    		Statement sta = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
    				ResultSet.CONCUR_UPDATABLE);

    		final ResultSet res = sta.executeQuery("SELECT * FROM Orders3");
    		if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY) {
    			System.out.println("ResultSet non-updatable.");
    		} else {
    			System.out.println("ResultSet updatable.");
    		}

    		while (res.next()) {

    			jList1.setModel(new javax.swing.AbstractListModel() {
    				{
    					String[] s = new String[Orders.length + 1];
    					for (int i = 0; i < Orders.length; i++) {
    						s[i] = Orders[i];
    					}
    					s[Orders.length] = ("  " + res.getInt("ID") + ", "
    							+ res.getString("Name1") + "  "
    							+ res.getString("Name2") + " - "
    							+ res.getString("Telephone") + ", "
    							+ res.getString("Brand") + "  "
    							+ res.getString("Model") + " - "
    							+ res.getString("Problem") + ", "
    							+ res.getString("Email") + ", "
    							+ res.getString("Time") + ", "
    							+ res.getString("Price") + ", " + res
    							.getString("Status"));
    					Orders = s;

    				}

    				public int getSize() {
    					return Orders.length;
    				}

    				public Object getElementAt(int i) {
    					return Orders[i];
    				}
    			});

    		}

    		res.close();

    		sta.close();


   		
    	}
    }
    
    /*		createConnection();
    		System.out.println(conn);

    		System.out.println("Lol");
    		jList1.setModel(new DefaultListModel());

    		Statement sta = conn.createStatement(ResultSet.TYPE_FORWARD_ONLY,
    				ResultSet.CONCUR_UPDATABLE);

    		final ResultSet res = sta.executeQuery("SELECT * FROM Orders3");
    		if (res.getConcurrency() == ResultSet.CONCUR_READ_ONLY) {
    			System.out.println("ResultSet non-updatable.");
    		} else {
    			System.out.println("ResultSet updatable.");
    		}

    		while (res.next()) {

    			jList1.setModel(new javax.swing.AbstractListModel() {
    				{
    					String[] s = new String[Orders.length + 1];
    					for (int i = 0; i < Orders.length; i++) {
    						s[i] = Orders[i];
    					}
    					s[Orders.length] = ("  " + res.getInt("ID") + ", "
    							+ res.getString("Name1") + ", "
    							+ res.getString("Name2") + ", "
    							+ res.getString("Telephone") + ", "
    							+ res.getString("Brand") + ", "
    							+ res.getString("Model") + ", "
    							+ res.getString("Email") + ", "
    							+ res.getString("Time") + ", "
    							+ res.getString("Price") + ", " + res
    							.getString("Status"));
    					Orders = s;

    				}

    				public int getSize() {
    					return Orders.length;
    				}

    				public Object getElementAt(int i) {
    					return Orders[i];
    				}
    			});

    		}

    		res.close();

    		sta.close();
    	}                                    
*/
    	private static void createConnection() {
    		try {
    			Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
    			// Get a connection
    			conn = DriverManager.getConnection(dbURL);

    		} catch (Exception except) {
    			except.printStackTrace();
    		}
    	}
    	int i;
    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) 
    	throws SQLException {
    		i=1;
    		System.out.println(i);
    	}                                    

    	                     


    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
	
    	i=2;
	}   

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
	
    	i=3;
	}   

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AllOrders().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration
}
